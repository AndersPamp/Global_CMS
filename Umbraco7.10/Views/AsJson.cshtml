@*     
    Add this template to your Umbraco 7 site and content can be viewed as JSON
    using:
    /content-path/?alttemplate=AsJson

    From: https://gist.github.com/EdCharbeneau/702a4c2d702d30f371bd
    Modified by Ironboy
*@
@using Newtonsoft.Json;
@using System.Dynamic;
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@*  Try to get properties recursively while avoiding circular references *@
@functions{
    IDictionary<string, object> GetProperties(ICollection<IPublishedProperty> props)
    {
        dynamic exObj = new System.Dynamic.ExpandoObject();
        var dictionary = exObj as IDictionary<string, object>;
        foreach (var prop in props)
        {
            var umbracoNodes = prop.Value as List<IPublishedContent>;

            if (umbracoNodes != null)
            {
                var tmpDictionaries = new List<dynamic>();
                foreach(var umbracoNode in umbracoNodes)
                {
                    tmpDictionaries.Add(GetProperties(umbracoNode.Properties));
                }
                dictionary[prop.PropertyTypeAlias] = tmpDictionaries;
                continue;
            }
            if(prop.Value is Newtonsoft.Json.Linq.JObject){
                dictionary[prop.PropertyTypeAlias] = prop.Value;
            }
            else {
                try {
                    dictionary[prop.PropertyTypeAlias] = prop.Value.ToString();
                }
                catch(InvalidCastException e){}
            }
            //dictionary[prop.PropertyTypeAlias] = prop.Value.GetType();
        }
        return dictionary;
    }
}
@* Set empty layout and correct response header *@
@{
    Layout = null;
    Response.ContentType = "application/json";
}
@* Output JSON *@
@Html.Raw(JsonConvert.SerializeObject(
    GetProperties(Model.Content.Properties),
    Formatting.Indented, 
    new JsonSerializerSettings
    {
        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
    }
))